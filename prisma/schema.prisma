datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Auth related schema

model Account {
  id                 Int       @id @default(autoincrement())
  compoundId         String    @unique @map(name: "compound_id")
  userId             Int       @map(name: "user_id")
  providerType       String    @map(name: "provider_type")
  providerId         String    @map(name: "provider_id")
  providerAccountId  String    @map(name: "provider_account_id")
  refreshToken       String?   @map(name: "refresh_token")
  accessToken        String?   @map(name: "access_token")
  accessTokenExpires DateTime? @map(name: "access_token_expires")
  createdAt          DateTime  @default(now()) @map(name: "created_at")
  updatedAt          DateTime  @default(now()) @map(name: "updated_at")


  @@index([providerAccountId], name: "providerAccountId")
  @@index([providerId], name: "providerId")
  @@index([userId], name: "userId")
  @@map(name: "accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  userId       Int      @map(name: "user_id")
  expires      DateTime
  sessionToken String   @unique @map(name: "session_token")
  accessToken  String   @unique @map(name: "access_token")
  createdAt    DateTime @default(now()) @map(name: "created_at")
  updatedAt    DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "sessions")
}

model User {
  id            Int       @id @default(autoincrement())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map(name: "email_verified")
  image         String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @default(now()) @map(name: "updated_at")

  projects Project[]

  @@map(name: "users")
}

model VerificationRequest {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now()) @map(name: "created_at")
  updatedAt  DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "verification_requests")
}

// Business logic related schema

model Project {
  id           String        @id @default(cuid())
  name         String
  description  String?
  userId       String
  createdAt    DateTime      @default(now()) @map(name: "created_at")
  updatedAt    DateTime      @updatedAt @map(name: "updated_at")
  isArchived   Boolean       @default(false)
  featureFlags FeatureFlag[]

  User                 User? @relation(fields: [userId_ProjectToUser], references: [id])
  userId_ProjectToUser Int?
  @@map(name: "projects")
}

model FeatureFlag {
  id          String   @id @default(cuid())
  projectId   String?
  name        String
  description String?
  isActive    Boolean  @default(false)
  isArchived  Boolean  @default(false)
  createdAt   DateTime @default(now()) @map(name: "created_at")
  updatedAt   DateTime @updatedAt @map(name: "updated_at")
  heats       Heat[]

  Project  Project?   @relation(fields: [projectId], references: [id])
  AuditLog AuditLog[]
}

model Heat {
  id        String   @id @default(cuid())
  flagId    String?
  type      HeatType
  strategy  Strategy
  property  String
  values    String[]
  name      String?
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")


  FeatureFlag FeatureFlag? @relation(fields: [flagId], references: [id])
}

model AuditLog {
  id     String  @id @default(cuid())
  flagId String?
  type   String
  before Json?
  after  Json

  FeatureFlag FeatureFlag? @relation(fields: [flagId], references: [id])
  createdAt   DateTime     @default(now()) @map(name: "created_at")
  updatedAt   DateTime     @updatedAt @map(name: "updated_at")
}

enum HeatType {
  ENVIRONMENT
  USER_INCLUDE
  USER_EXCLUDE
  CUSTOM
}

enum Strategy {
  IN
  NOT_IN
}
